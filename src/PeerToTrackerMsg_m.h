//
// Generated file, do not edit! Created by opp_msgc 4.3 from PeerToTrackerMsg.msg.
//

#ifndef _PEERTOTRACKERMSG_M_H_
#define _PEERTOTRACKERMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>PeerToTrackerMsg.msg</tt> by opp_msgc.
 * <pre>
 * enum P2T_MSG_TYPE {
 *     P2T_REGISTRATION_REQUEST = 0;
 *     P2T_REFRESH_MESSAGE = 1;    
 *     T2P_MEMBERSHIP_RESPONSE = 2;
 *     P2T_DOWNLOAD_COMPLETE = 3;
 * };
 * </pre>
 */
enum P2T_MSG_TYPE {
    P2T_REGISTRATION_REQUEST = 0,
    P2T_REFRESH_MESSAGE = 1,
    T2P_MEMBERSHIP_RESPONSE = 2,
    P2T_DOWNLOAD_COMPLETE = 3
};

/**
 * Class generated from <tt>PeerToTrackerMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet P2T_Packet
 * {
 *    int     type @enum(P2T_MSG_TYPE);  
 * };
 * </pre>
 */
class P2T_Packet : public ::cPacket
{
  protected:
    int type_var;

  private:
    void copy(const P2T_Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const P2T_Packet&);

  public:
    P2T_Packet(const char *name=NULL, int kind=0);
    P2T_Packet(const P2T_Packet& other);
    virtual ~P2T_Packet();
    P2T_Packet& operator=(const P2T_Packet& other);
    virtual P2T_Packet *dup() const {return new P2T_Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, P2T_Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, P2T_Packet& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PeerToTrackerMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet Ownership_Message extends P2T_Packet
 * {
 *     string	id;		        
 *     int owned_chunks[];		
 * };
 * </pre>
 */
class Ownership_Message : public ::P2T_Packet
{
  protected:
    opp_string id_var;
    int *owned_chunks_var; // array ptr
    unsigned int owned_chunks_arraysize;

  private:
    void copy(const Ownership_Message& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ownership_Message&);

  public:
    Ownership_Message(const char *name=NULL, int kind=0);
    Ownership_Message(const Ownership_Message& other);
    virtual ~Ownership_Message();
    Ownership_Message& operator=(const Ownership_Message& other);
    virtual Ownership_Message *dup() const {return new Ownership_Message(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual void setOwned_chunksArraySize(unsigned int size);
    virtual unsigned int getOwned_chunksArraySize() const;
    virtual int getOwned_chunks(unsigned int k) const;
    virtual void setOwned_chunks(unsigned int k, int owned_chunks);
};

inline void doPacking(cCommBuffer *b, Ownership_Message& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Ownership_Message& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PeerToTrackerMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet T2P_MEMBERSHIP_Res extends P2T_Packet{
 *     string ids[];   
 *     Ownership_Message peer_to_chunk_ownership[];
 * };
 * </pre>
 */
class T2P_MEMBERSHIP_Res : public ::P2T_Packet
{
  protected:
    opp_string *ids_var; // array ptr
    unsigned int ids_arraysize;
    Ownership_Message *peer_to_chunk_ownership_var; // array ptr
    unsigned int peer_to_chunk_ownership_arraysize;

  private:
    void copy(const T2P_MEMBERSHIP_Res& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const T2P_MEMBERSHIP_Res&);

  public:
    T2P_MEMBERSHIP_Res(const char *name=NULL, int kind=0);
    T2P_MEMBERSHIP_Res(const T2P_MEMBERSHIP_Res& other);
    virtual ~T2P_MEMBERSHIP_Res();
    T2P_MEMBERSHIP_Res& operator=(const T2P_MEMBERSHIP_Res& other);
    virtual T2P_MEMBERSHIP_Res *dup() const {return new T2P_MEMBERSHIP_Res(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setIdsArraySize(unsigned int size);
    virtual unsigned int getIdsArraySize() const;
    virtual const char * getIds(unsigned int k) const;
    virtual void setIds(unsigned int k, const char * ids);
    virtual void setPeer_to_chunk_ownershipArraySize(unsigned int size);
    virtual unsigned int getPeer_to_chunk_ownershipArraySize() const;
    virtual Ownership_Message& getPeer_to_chunk_ownership(unsigned int k);
    virtual const Ownership_Message& getPeer_to_chunk_ownership(unsigned int k) const {return const_cast<T2P_MEMBERSHIP_Res*>(this)->getPeer_to_chunk_ownership(k);}
    virtual void setPeer_to_chunk_ownership(unsigned int k, const Ownership_Message& peer_to_chunk_ownership);
};

inline void doPacking(cCommBuffer *b, T2P_MEMBERSHIP_Res& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, T2P_MEMBERSHIP_Res& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PeerToTrackerMsg.msg</tt> by opp_msgc.
 * <pre>
 * packet P2T_DOWNLOAD_COMPLETE_Msg extends P2T_Packet
 * {
 *     string	id;		        
 * };
 * </pre>
 */
class P2T_DOWNLOAD_COMPLETE_Msg : public ::P2T_Packet
{
  protected:
    opp_string id_var;

  private:
    void copy(const P2T_DOWNLOAD_COMPLETE_Msg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const P2T_DOWNLOAD_COMPLETE_Msg&);

  public:
    P2T_DOWNLOAD_COMPLETE_Msg(const char *name=NULL, int kind=0);
    P2T_DOWNLOAD_COMPLETE_Msg(const P2T_DOWNLOAD_COMPLETE_Msg& other);
    virtual ~P2T_DOWNLOAD_COMPLETE_Msg();
    P2T_DOWNLOAD_COMPLETE_Msg& operator=(const P2T_DOWNLOAD_COMPLETE_Msg& other);
    virtual P2T_DOWNLOAD_COMPLETE_Msg *dup() const {return new P2T_DOWNLOAD_COMPLETE_Msg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
};

inline void doPacking(cCommBuffer *b, P2T_DOWNLOAD_COMPLETE_Msg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, P2T_DOWNLOAD_COMPLETE_Msg& obj) {obj.parsimUnpack(b);}


#endif // _PEERTOTRACKERMSG_M_H_
