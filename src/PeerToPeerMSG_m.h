//
// Generated file, do not edit! Created by opp_msgc 4.3 from PeerToPeerMSG.msg.
//

#ifndef _PEERTOPEERMSG_M_H_
#define _PEERTOPEERMSG_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>PeerToPeerMSG.msg</tt> by opp_msgc.
 * <pre>
 * enum P2P_MSG_TYPE {
 *     P2P_REQUEST = 0;
 *     P2P_RESPONSE = 1;
 * };
 * </pre>
 */
enum P2P_MSG_TYPE {
    P2P_REQUEST = 0,
    P2P_RESPONSE = 1
};

/**
 * Class generated from <tt>PeerToPeerMSG.msg</tt> by opp_msgc.
 * <pre>
 * packet P2P_Packet{
 *    int     type @enum(P2P_MSG_TYPE);  
 * };
 * </pre>
 */
class P2P_Packet : public ::cPacket
{
  protected:
    int type_var;

  private:
    void copy(const P2P_Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const P2P_Packet&);

  public:
    P2P_Packet(const char *name=NULL, int kind=0);
    P2P_Packet(const P2P_Packet& other);
    virtual ~P2P_Packet();
    P2P_Packet& operator=(const P2P_Packet& other);
    virtual P2P_Packet *dup() const {return new P2P_Packet(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type);
};

inline void doPacking(cCommBuffer *b, P2P_Packet& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, P2P_Packet& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PeerToPeerMSG.msg</tt> by opp_msgc.
 * <pre>
 * packet P2P_Req extends P2P_Packet{
 *     string	id;		        
 *     int chunkNo;	        
 * };
 * </pre>
 */
class P2P_Req : public ::P2P_Packet
{
  protected:
    opp_string id_var;
    int chunkNo_var;

  private:
    void copy(const P2P_Req& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const P2P_Req&);

  public:
    P2P_Req(const char *name=NULL, int kind=0);
    P2P_Req(const P2P_Req& other);
    virtual ~P2P_Req();
    P2P_Req& operator=(const P2P_Req& other);
    virtual P2P_Req *dup() const {return new P2P_Req(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual int getChunkNo() const;
    virtual void setChunkNo(int chunkNo);
};

inline void doPacking(cCommBuffer *b, P2P_Req& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, P2P_Req& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>PeerToPeerMSG.msg</tt> by opp_msgc.
 * <pre>
 * packet P2P_Resp extends P2P_Packet{
 *     string  id;				
 *     int chunkNo;			
 *     char contents[];	    
 * };
 * </pre>
 */
class P2P_Resp : public ::P2P_Packet
{
  protected:
    opp_string id_var;
    int chunkNo_var;
    char *contents_var; // array ptr
    unsigned int contents_arraysize;

  private:
    void copy(const P2P_Resp& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const P2P_Resp&);

  public:
    P2P_Resp(const char *name=NULL, int kind=0);
    P2P_Resp(const P2P_Resp& other);
    virtual ~P2P_Resp();
    P2P_Resp& operator=(const P2P_Resp& other);
    virtual P2P_Resp *dup() const {return new P2P_Resp(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getId() const;
    virtual void setId(const char * id);
    virtual int getChunkNo() const;
    virtual void setChunkNo(int chunkNo);
    virtual void setContentsArraySize(unsigned int size);
    virtual unsigned int getContentsArraySize() const;
    virtual char getContents(unsigned int k) const;
    virtual void setContents(unsigned int k, char contents);
};

inline void doPacking(cCommBuffer *b, P2P_Resp& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, P2P_Resp& obj) {obj.parsimUnpack(b);}


#endif // _PEERTOPEERMSG_M_H_
