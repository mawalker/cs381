// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:152

#ifndef _TAO_IDL_TORRENTC_IWOFZ5_H_
#define _TAO_IDL_TORRENTC_IWOFZ5_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/UserException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/String_Manager_T.h"
#include "tao/Sequence_T.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Seq_Var_T.h"
#include "tao/Seq_Out_T.h"
#include "tao/VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 2 || TAO_BETA_VERSION != 5
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// be/be_visitor_root/root_ch.cpp:160
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_CHUNK_CH_)
#define _CHUNK_CH_

class Chunk;

typedef
  ::TAO_FixedSeq_Var_T<
      Chunk
    >
  Chunk_var;

typedef
  ::TAO_Seq_Out_T<
      Chunk
    >
  Chunk_out;

class  Chunk
  : public
      ::TAO::unbounded_value_sequence<
          ::CORBA::Octet
        >
{
public:
  Chunk (void);
  Chunk ( ::CORBA::ULong max);
  Chunk (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet* buffer,
    ::CORBA::Boolean release = false);
  Chunk (const Chunk &);
  virtual ~Chunk (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef Chunk_var _var_type;
  typedef Chunk_out _out_type;

  static void _tao_any_destructor (void *);

  

#if (TAO_NO_COPY_OCTET_SEQUENCES == 1)
  Chunk (
      ::CORBA::ULong length,
      const ACE_Message_Block* mb
    )
    : ::TAO::unbounded_value_sequence< ::CORBA::Octet> (length, mb) {}
#endif /* TAO_NO_COPY_OCTET_SEQUENCE == 1 */
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:37

extern  ::CORBA::TypeCode_ptr const _tc_Chunk;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_CHUNKNUMBERS_CH_)
#define _CHUNKNUMBERS_CH_

class ChunkNumbers;

typedef
  ::TAO_FixedSeq_Var_T<
      ChunkNumbers
    >
  ChunkNumbers_var;

typedef
  ::TAO_Seq_Out_T<
      ChunkNumbers
    >
  ChunkNumbers_out;

class  ChunkNumbers
  : public
      ::TAO::unbounded_value_sequence<
          ::CORBA::Long
        >
{
public:
  ChunkNumbers (void);
  ChunkNumbers ( ::CORBA::ULong max);
  ChunkNumbers (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long* buffer,
    ::CORBA::Boolean release = false);
  ChunkNumbers (const ChunkNumbers &);
  virtual ~ChunkNumbers (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef ChunkNumbers_var _var_type;
  typedef ChunkNumbers_out _out_type;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:37

extern  ::CORBA::TypeCode_ptr const _tc_ChunkNumbers;

// TAO_IDL - Generated from
// be/be_visitor_constant/constant_ch.cpp:38

const CORBA::Long CHUNK_SIZE = 262144;

// TAO_IDL - Generated from
// be/be_type.cpp:261

struct PeerToChunkMap;

typedef
  ::TAO_Var_Var_T<
      PeerToChunkMap
    >
  PeerToChunkMap_var;

typedef
  ::TAO_Out_T<
      PeerToChunkMap
    >
  PeerToChunkMap_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:51

struct  PeerToChunkMap
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef PeerToChunkMap_var _var_type;
  typedef PeerToChunkMap_out _out_type;

  static void _tao_any_destructor (void *);
  
  ::TAO::String_Manager client_id;
  ::TAO::String_Manager peer_ior_val;
  ChunkNumbers chunks_owned;
  ::CORBA::ULong num_chunks_owned;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:37

extern  ::CORBA::TypeCode_ptr const _tc_PeerToChunkMap;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_ch.cpp:102

#if !defined (_OWNERSHIPLIST_CH_)
#define _OWNERSHIPLIST_CH_

class OwnershipList;

typedef
  ::TAO_VarSeq_Var_T<
      OwnershipList
    >
  OwnershipList_var;

typedef
  ::TAO_Seq_Out_T<
      OwnershipList
    >
  OwnershipList_out;

class  OwnershipList
  : public
      ::TAO::unbounded_value_sequence<
          PeerToChunkMap
        >
{
public:
  OwnershipList (void);
  OwnershipList ( ::CORBA::ULong max);
  OwnershipList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    PeerToChunkMap* buffer,
    ::CORBA::Boolean release = false);
  OwnershipList (const OwnershipList &);
  virtual ~OwnershipList (void);
  

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef OwnershipList_var _var_type;
  typedef OwnershipList_out _out_type;

  static void _tao_any_destructor (void *);
};

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:37

extern  ::CORBA::TypeCode_ptr const _tc_OwnershipList;

// TAO_IDL - Generated from
// be/be_type.cpp:261

struct RegReply;

typedef
  ::TAO_Var_Var_T<
      RegReply
    >
  RegReply_var;

typedef
  ::TAO_Out_T<
      RegReply
    >
  RegReply_out;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_ch.cpp:51

struct  RegReply
{

  // TAO_IDL - Generated from
  // be/be_type.cpp:307

  
  typedef RegReply_var _var_type;
  typedef RegReply_out _out_type;

  static void _tao_any_destructor (void *);
  
  ::CORBA::Long num_chunks;
  ::CORBA::Long num_chunks_from_server;
  ::TAO::String_Manager server_ior_val;
};

// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_decl.cpp:37

extern  ::CORBA::TypeCode_ptr const _tc_RegReply;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:38

namespace Torrent
{

  // TAO_IDL - Generated from
  // be/be_visitor_exception/exception_ch.cpp:44

  class  NotFound : public ::CORBA::UserException
  {
  public:
    ::TAO::String_Manager msg;

    NotFound (void);
    NotFound (const NotFound &);
    ~NotFound (void);

    NotFound &operator= (const NotFound &);

    static void _tao_any_destructor (void *);

    static NotFound *_downcast ( ::CORBA::Exception *);
    static const NotFound *_downcast ( ::CORBA::Exception const *);

    static ::CORBA::Exception *_alloc (void);

    virtual ::CORBA::Exception *_tao_duplicate (void) const;

    virtual void _raise (void) const;

    virtual void _tao_encode (TAO_OutputCDR &cdr) const;
    virtual void _tao_decode (TAO_InputCDR &cdr);

    // TAO_IDL - Generated from
    // be/be_visitor_exception/exception_ctor.cpp:54

    NotFound (
        const char * _tao_msg);

    virtual ::CORBA::TypeCode_ptr _tao_type (void) const;
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:37

  extern  ::CORBA::TypeCode_ptr const _tc_NotFound;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_TORRENT_P2T__VAR_OUT_CH_)
#define _TORRENT_P2T__VAR_OUT_CH_

  class P2T;
  typedef P2T *P2T_ptr;

  typedef
    TAO_Objref_Var_T<
        P2T
      >
    P2T_var;
  
  typedef
    TAO_Objref_Out_T<
        P2T
      >
    P2T_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class  P2T
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<P2T>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef P2T_ptr _ptr_type;
    typedef P2T_var _var_type;
    typedef P2T_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static P2T_ptr _duplicate (P2T_ptr obj);

    static void _tao_release (P2T_ptr obj);

    static P2T_ptr _narrow (::CORBA::Object_ptr obj);
    static P2T_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static P2T_ptr _nil (void);

    virtual ::RegReply * _cxx_register (
      const char * client_id,
      const char * peer_ior_val,
      const char * file_name);

    virtual void leave (
      const char * client_id,
      ::CORBA::ULongLong time_in_miliseconds);

    virtual ::OwnershipList * refresh (
      const char * client_id,
      const char * file_name,
      const ::ChunkNumbers & chunks_owned);

    virtual void sendNumChunks (
      const char * file_name,
      const char * server_ior_val,
      ::CORBA::Long number_of_chunks);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    P2T (void);

    // Concrete non-local interface only.
    P2T (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    P2T (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~P2T (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    P2T (const P2T &);

    void operator= (const P2T &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:37

  extern  ::CORBA::TypeCode_ptr const _tc_P2T;

  // TAO_IDL - Generated from
  // be/be_interface.cpp:751

#if !defined (_TORRENT_P2P__VAR_OUT_CH_)
#define _TORRENT_P2P__VAR_OUT_CH_

  class P2P;
  typedef P2P *P2P_ptr;

  typedef
    TAO_Objref_Var_T<
        P2P
      >
    P2P_var;
  
  typedef
    TAO_Objref_Out_T<
        P2P
      >
    P2P_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_ch.cpp:43

  class  P2P
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<P2P>;

    // TAO_IDL - Generated from
    // be/be_type.cpp:307

    typedef P2P_ptr _ptr_type;
    typedef P2P_var _var_type;
    typedef P2P_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static P2P_ptr _duplicate (P2P_ptr obj);

    static void _tao_release (P2P_ptr obj);

    static P2P_ptr _narrow (::CORBA::Object_ptr obj);
    static P2P_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static P2P_ptr _nil (void);

    virtual ::Chunk * getChunk (
      const char * file_name,
      ::CORBA::Long chunckNumber);

    virtual void shutdown (
      void);

    // TAO_IDL - Generated from
    // be/be_visitor_interface/interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    P2P (void);

    // Concrete non-local interface only.
    P2P (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    P2P (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~P2P (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    P2P (const P2P &);

    void operator= (const P2P &);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_typecode/typecode_decl.cpp:37

  extern  ::CORBA::TypeCode_ptr const _tc_P2P;

// TAO_IDL - Generated from
// be/be_visitor_module/module_ch.cpp:67

} // module Torrent

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::Chunk>
    : public
        Var_Size_Arg_Traits_T<
            ::Chunk,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::ChunkNumbers>
    : public
        Var_Size_Arg_Traits_T<
            ::ChunkNumbers,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::PeerToChunkMap>
    : public
        Var_Size_Arg_Traits_T<
            ::PeerToChunkMap,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class Arg_Traits< ::OwnershipList>
    : public
        Var_Size_Arg_Traits_T<
            ::OwnershipList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class Arg_Traits< ::RegReply>
    : public
        Var_Size_Arg_Traits_T<
            ::RegReply,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:147

#if !defined (_TORRENT_P2T__ARG_TRAITS_)
#define _TORRENT_P2T__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Torrent::P2T>
    : public
        Object_Arg_Traits_T<
            ::Torrent::P2T_ptr,
            ::Torrent::P2T_var,
            ::Torrent::P2T_out,
            TAO::Objref_Traits<Torrent::P2T>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:147

#if !defined (_TORRENT_P2P__ARG_TRAITS_)
#define _TORRENT_P2P__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::Torrent::P2P>
    : public
        Object_Arg_Traits_T<
            ::Torrent::P2P_ptr,
            ::Torrent::P2P_var,
            ::Torrent::P2P_out,
            TAO::Objref_Traits<Torrent::P2P>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_TORRENT_P2T__TRAITS_)
#define _TORRENT_P2T__TRAITS_

  template<>
  struct  Objref_Traits< ::Torrent::P2T>
  {
    static ::Torrent::P2T_ptr duplicate (
        ::Torrent::P2T_ptr p);
    static void release (
        ::Torrent::P2T_ptr p);
    static ::Torrent::P2T_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Torrent::P2T_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_TORRENT_P2P__TRAITS_)
#define _TORRENT_P2P__TRAITS_

  template<>
  struct  Objref_Traits< ::Torrent::P2P>
  {
    static ::Torrent::P2P_ptr duplicate (
        ::Torrent::P2P_ptr p);
    static void release (
        ::Torrent::P2P_ptr p);
    static ::Torrent::P2P_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::Torrent::P2P_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const Chunk &); // copying version
 void operator<<= ( ::CORBA::Any &, Chunk*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Chunk *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Chunk *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const ChunkNumbers &); // copying version
 void operator<<= ( ::CORBA::Any &, ChunkNumbers*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ChunkNumbers *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ChunkNumbers *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const PeerToChunkMap &); // copying version
 void operator<<= (::CORBA::Any &, PeerToChunkMap*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, PeerToChunkMap *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const PeerToChunkMap *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= ( ::CORBA::Any &, const OwnershipList &); // copying version
 void operator<<= ( ::CORBA::Any &, OwnershipList*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, OwnershipList *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const OwnershipList *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_ch.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const RegReply &); // copying version
 void operator<<= (::CORBA::Any &, RegReply*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, RegReply *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const RegReply *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_ch.cpp:41

#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Torrent
{
  

   void operator<<= (::CORBA::Any &, const ::Torrent::NotFound &); // copying version
   void operator<<= (::CORBA::Any &, ::Torrent::NotFound*); // noncopying version
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, ::Torrent::NotFound *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const ::Torrent::NotFound *&);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, const Torrent::NotFound &); // copying version
 void operator<<= (::CORBA::Any &, Torrent::NotFound*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Torrent::NotFound *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const Torrent::NotFound *&);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Torrent
{
   void operator<<= ( ::CORBA::Any &, P2T_ptr); // copying
   void operator<<= ( ::CORBA::Any &, P2T_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, P2T_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Torrent::P2T_ptr); // copying
 void operator<<= (::CORBA::Any &, Torrent::P2T_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Torrent::P2T_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Torrent
{
   void operator<<= ( ::CORBA::Any &, P2P_ptr); // copying
   void operator<<= ( ::CORBA::Any &, P2P_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, P2P_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, Torrent::P2P_ptr); // copying
 void operator<<= (::CORBA::Any &, Torrent::P2P_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Torrent::P2P_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_Chunk_H_
#define _TAO_CDR_OP_Chunk_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Chunk &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Chunk &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_Chunk_H_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_ChunkNumbers_H_
#define _TAO_CDR_OP_ChunkNumbers_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ChunkNumbers &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ChunkNumbers &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_ChunkNumbers_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const PeerToChunkMap &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, PeerToChunkMap &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_ch.cpp:68

#if !defined _TAO_CDR_OP_OwnershipList_H_
#define _TAO_CDR_OP_OwnershipList_H_
TAO_BEGIN_VERSIONED_NAMESPACE_DECL


 ::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OwnershipList &_tao_sequence);
 ::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OwnershipList &_tao_sequence);

TAO_END_VERSIONED_NAMESPACE_DECL



#endif /* _TAO_CDR_OP_OwnershipList_H_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_ch.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const RegReply &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, RegReply &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_ch.cpp:40
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Torrent::NotFound &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Torrent::NotFound &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:44

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Torrent::P2T_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Torrent::P2T_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_ch.cpp:44

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const Torrent::P2P_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, Torrent::P2P_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "TorrentC.inl"
#endif /* defined INLINE */

#endif /* ifndef */

