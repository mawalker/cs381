// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:461

#ifndef _TAO_IDL_TORRENTS_LSMHDA_H_
#define _TAO_IDL_TORRENTS_LSMHDA_H_


#include "TorrentC.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/Fixed_Size_SArgument_T.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "tao/PortableServer/PortableServer.h"
#include "tao/PortableServer/Servant_Base.h"

// TAO_IDL - Generated from
// be/be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class SArg_Traits< ::Chunk>
    : public
        Var_Size_SArg_Traits_T<
            ::Chunk,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class SArg_Traits< ::ChunkNumbers>
    : public
        Var_Size_SArg_Traits_T<
            ::ChunkNumbers,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class SArg_Traits< ::PeerToChunkMap>
    : public
        Var_Size_SArg_Traits_T<
            ::PeerToChunkMap,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:685

  template<>
  class SArg_Traits< ::OwnershipList>
    : public
        Var_Size_SArg_Traits_T<
            ::OwnershipList,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:947

  template<>
  class SArg_Traits< ::RegReply>
    : public
        Var_Size_SArg_Traits_T<
            ::RegReply,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:147

#if !defined (_TORRENT_P2T__SARG_TRAITS_)
#define _TORRENT_P2T__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Torrent::P2T>
    : public
        Object_SArg_Traits_T<
            ::Torrent::P2T_ptr,
            ::Torrent::P2T_var,
            ::Torrent::P2T_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // be/be_visitor_arg_traits.cpp:147

#if !defined (_TORRENT_P2P__SARG_TRAITS_)
#define _TORRENT_P2P__SARG_TRAITS_

  template<>
  class  SArg_Traits< ::Torrent::P2P>
    : public
        Object_SArg_Traits_T<
            ::Torrent::P2P_ptr,
            ::Torrent::P2P_var,
            ::Torrent::P2P_out,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:38

namespace POA_Torrent
{
  

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:76

  class P2T;
  typedef P2T *P2T_ptr;

  class  P2T
    : public virtual PortableServer::ServantBase
  {
  protected:
    P2T (void);
  
  public:
    /// Useful for template programming.
    typedef ::Torrent::P2T _stub_type;
    typedef ::Torrent::P2T_ptr _stub_ptr_type;
    typedef ::Torrent::P2T_var _stub_var_type;

    P2T (const P2T& rhs);
    virtual ~P2T (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Torrent::P2T *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual ::RegReply * _cxx_register (
      const char * client_id,
      const char * peer_ior_val,
      const char * file_name) = 0;

    static void _cxx_register_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void leave (
      const char * client_id,
      ::CORBA::ULongLong time_in_miliseconds) = 0;

    static void leave_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual ::OwnershipList * refresh (
      const char * client_id,
      const char * file_name,
      const ::ChunkNumbers & chunks_owned) = 0;

    static void refresh_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void sendNumChunks (
      const char * file_name,
      const char * server_ior_val,
      ::CORBA::Long number_of_chunks) = 0;

    static void sendNumChunks_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void shutdown (
      void) = 0;

    static void shutdown_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

  // TAO_IDL - Generated from
  // be/be_visitor_interface/interface_sh.cpp:76

  class P2P;
  typedef P2P *P2P_ptr;

  class  P2P
    : public virtual PortableServer::ServantBase
  {
  protected:
    P2P (void);
  
  public:
    /// Useful for template programming.
    typedef ::Torrent::P2P _stub_type;
    typedef ::Torrent::P2P_ptr _stub_ptr_type;
    typedef ::Torrent::P2P_var _stub_var_type;

    P2P (const P2P& rhs);
    virtual ~P2P (void);

    virtual ::CORBA::Boolean _is_a (const char* logical_type_id);

    virtual void _dispatch (
        TAO_ServerRequest & req,
        TAO::Portable_Server::Servant_Upcall *servant_upcall);
    
    ::Torrent::P2P *_this (void);
    
    virtual const char* _interface_repository_id (void) const;

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual ::Chunk * getChunk (
      const char * file_name,
      ::CORBA::Long chunckNumber) = 0;

    static void getChunk_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);

    // TAO_IDL - Generated from
    // be/be_visitor_operation/operation_sh.cpp:39

    virtual void shutdown (
      void) = 0;

    static void shutdown_skel (
        TAO_ServerRequest &server_request,
        TAO::Portable_Server::Servant_Upcall *servant_upcall,
        TAO_ServantBase *servant);
  };

// TAO_IDL - Generated from
// be/be_visitor_module/module_sh.cpp:69

} // module Torrent

#endif /* ifndef */

