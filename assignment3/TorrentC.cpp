// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2.5
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "TorrentC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/ORB_Core.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "TorrentC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_CHUNK_CS_)
#define _CHUNK_CS_

Chunk::Chunk (void)
{}

Chunk::Chunk (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (max)
{}

Chunk::Chunk (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Octet * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      >
    (max, length, buffer, release)
{}

Chunk::Chunk (
    const Chunk &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Octet
      > (seq)
{}

Chunk::~Chunk (void)
{}

void Chunk::_tao_any_destructor (
    void * _tao_void_pointer)
{
  Chunk * _tao_tmp_pointer =
    static_cast<Chunk *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_Chunk_GUARD
#define _TAO_TYPECODE_Chunk_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        Chunk_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_octet,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_Chunk_0 =
        &Chunk_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_Chunk_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_Chunk (
    ::CORBA::tk_alias,
    "IDL:Chunk:1.0",
    "Chunk",
    &TAO::TypeCode::tc_Chunk_0);
  
::CORBA::TypeCode_ptr const _tc_Chunk =
  &_tao_tc_Chunk;

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_CHUNKNUMBERS_CS_)
#define _CHUNKNUMBERS_CS_

ChunkNumbers::ChunkNumbers (void)
{}

ChunkNumbers::ChunkNumbers (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

ChunkNumbers::ChunkNumbers (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

ChunkNumbers::ChunkNumbers (
    const ChunkNumbers &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

ChunkNumbers::~ChunkNumbers (void)
{}

void ChunkNumbers::_tao_any_destructor (
    void * _tao_void_pointer)
{
  ChunkNumbers * _tao_tmp_pointer =
    static_cast<ChunkNumbers *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_ChunkNumbers_GUARD
#define _TAO_TYPECODE_ChunkNumbers_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        ChunkNumbers_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_ChunkNumbers_0 =
        &ChunkNumbers_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_ChunkNumbers_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_ChunkNumbers (
    ::CORBA::tk_alias,
    "IDL:ChunkNumbers:1.0",
    "ChunkNumbers",
    &TAO::TypeCode::tc_ChunkNumbers_0);
  
::CORBA::TypeCode_ptr const _tc_ChunkNumbers =
  &_tao_tc_ChunkNumbers;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:466

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_PeerToChunkMap[] =
      {
        { "client_id", &CORBA::_tc_string },
        { "peer_ior_val", &CORBA::_tc_string },
        { "chunks_owned", &_tc_ChunkNumbers },
        { "num_chunks_owned", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_PeerToChunkMap (
  ::CORBA::tk_struct,
  "IDL:PeerToChunkMap:1.0",
  "PeerToChunkMap",
  _tao_fields_PeerToChunkMap,
  4);

::CORBA::TypeCode_ptr const _tc_PeerToChunkMap =
  &_tao_tc_PeerToChunkMap;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
PeerToChunkMap::_tao_any_destructor (
    void *_tao_void_pointer)
{
  PeerToChunkMap *_tao_tmp_pointer =
    static_cast<PeerToChunkMap *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OWNERSHIPLIST_CS_)
#define _OWNERSHIPLIST_CS_

OwnershipList::OwnershipList (void)
{}

OwnershipList::OwnershipList (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        PeerToChunkMap
      > (max)
{}

OwnershipList::OwnershipList (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    PeerToChunkMap * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        PeerToChunkMap
      >
    (max, length, buffer, release)
{}

OwnershipList::OwnershipList (
    const OwnershipList &seq)
  : ::TAO::unbounded_value_sequence<
        PeerToChunkMap
      > (seq)
{}

OwnershipList::~OwnershipList (void)
{}

void OwnershipList::_tao_any_destructor (
    void * _tao_void_pointer)
{
  OwnershipList * _tao_tmp_pointer =
    static_cast<OwnershipList *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_typecode/alias_typecode.cpp:51



// TAO_IDL - Generated from
// be/be_visitor_typecode/typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_OwnershipList_GUARD
#define _TAO_TYPECODE_OwnershipList_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        OwnershipList_0 (
          ::CORBA::tk_sequence,
          &_tc_PeerToChunkMap,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_OwnershipList_0 =
        &OwnershipList_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_OwnershipList_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_OwnershipList (
    ::CORBA::tk_alias,
    "IDL:OwnershipList:1.0",
    "OwnershipList",
    &TAO::TypeCode::tc_OwnershipList_0);
  
::CORBA::TypeCode_ptr const _tc_OwnershipList =
  &_tao_tc_OwnershipList;

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_RegReply[] =
      {
        { "num_chunks", &CORBA::_tc_long },
        { "num_chunks_from_server", &CORBA::_tc_long },
        { "server_ior_val", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_RegReply (
  ::CORBA::tk_struct,
  "IDL:RegReply:1.0",
  "RegReply",
  _tao_fields_RegReply,
  3);

::CORBA::TypeCode_ptr const _tc_RegReply =
  &_tao_tc_RegReply;

// TAO_IDL - Generated from
// be/be_visitor_structure/structure_cs.cpp:59

void
RegReply::_tao_any_destructor (
    void *_tao_void_pointer)
{
  RegReply *_tao_tmp_pointer =
    static_cast<RegReply *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_ctor.cpp:54

Torrent::NotFound::NotFound (
    const char * _tao_msg)
  : ::CORBA::UserException (
        "IDL:Torrent/NotFound:1.0",
        "NotFound"
      )
{
  this->msg = ::CORBA::string_dup (_tao_msg);
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:101

Torrent::NotFound::NotFound (void)
  : ::CORBA::UserException (
        "IDL:Torrent/NotFound:1.0",
        "NotFound"
      )
{
}

Torrent::NotFound::~NotFound (void)
{
}

Torrent::NotFound::NotFound (const ::Torrent::NotFound &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->msg = ::CORBA::string_dup (_tao_excp.msg.in ());
}

Torrent::NotFound&
Torrent::NotFound::operator= (const ::Torrent::NotFound &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->msg = ::CORBA::string_dup (_tao_excp.msg.in ());
  return *this;
}

void Torrent::NotFound::_tao_any_destructor (void *_tao_void_pointer)
{
  NotFound *_tao_tmp_pointer =
    static_cast<NotFound *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

Torrent::NotFound *
Torrent::NotFound::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<NotFound *> (_tao_excp);
}

const Torrent::NotFound *
Torrent::NotFound::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const NotFound *> (_tao_excp);
}

::CORBA::Exception *Torrent::NotFound::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::Torrent::NotFound, 0);
  return retval;
}

::CORBA::Exception *
Torrent::NotFound::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::Torrent::NotFound (*this),
      0
    );
  return result;
}

void Torrent::NotFound::_raise (void) const
{
  throw *this;
}

void Torrent::NotFound::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void Torrent::NotFound::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr Torrent::NotFound::_tao_type (void) const
{
  return ::Torrent::_tc_NotFound;
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_Torrent_NotFound[] =
      {
        { "msg", &CORBA::_tc_string }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_Torrent_NotFound (
  ::CORBA::tk_except,
  "IDL:Torrent/NotFound:1.0",
  "NotFound",
  _tao_fields_Torrent_NotFound,
  1);


namespace Torrent
{
  ::CORBA::TypeCode_ptr const _tc_NotFound =
    &_tao_tc_Torrent_NotFound;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for Torrent::P2T.

Torrent::P2T_ptr
TAO::Objref_Traits<Torrent::P2T>::duplicate (
    Torrent::P2T_ptr p)
{
  return Torrent::P2T::_duplicate (p);
}

void
TAO::Objref_Traits<Torrent::P2T>::release (
    Torrent::P2T_ptr p)
{
  ::CORBA::release (p);
}

Torrent::P2T_ptr
TAO::Objref_Traits<Torrent::P2T>::nil (void)
{
  return Torrent::P2T::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Torrent::P2T>::marshal (
    const Torrent::P2T_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::RegReply *
Torrent::P2T::_cxx_register (
  const char * client_id,
  const char * peer_ior_val,
  const char * file_name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::RegReply>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_client_id (client_id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_peer_ior_val (peer_ior_val);
  TAO::Arg_Traits< char *>::in_arg_val _tao_file_name (file_name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_client_id,
      &_tao_peer_ior_val,
      &_tao_file_name
    };

  static TAO::Exception_Data
  _tao_Torrent_P2T_register_exceptiondata [] = 
    {
      {
        "IDL:Torrent/NotFound:1.0",
        Torrent::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Torrent::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "register",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Torrent_P2T_register_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
Torrent::P2T::leave (
  const char * client_id,
  ::CORBA::ULongLong time_in_miliseconds)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_client_id (client_id);
  TAO::Arg_Traits< ::CORBA::ULongLong>::in_arg_val _tao_time_in_miliseconds (time_in_miliseconds);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_client_id,
      &_tao_time_in_miliseconds
    };

  static TAO::Exception_Data
  _tao_Torrent_P2T_leave_exceptiondata [] = 
    {
      {
        "IDL:Torrent/NotFound:1.0",
        Torrent::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Torrent::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "leave",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Torrent_P2T_leave_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OwnershipList *
Torrent::P2T::refresh (
  const char * client_id,
  const char * file_name,
  const ::ChunkNumbers & chunks_owned)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OwnershipList>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_client_id (client_id);
  TAO::Arg_Traits< char *>::in_arg_val _tao_file_name (file_name);
  TAO::Arg_Traits< ::ChunkNumbers>::in_arg_val _tao_chunks_owned (chunks_owned);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_client_id,
      &_tao_file_name,
      &_tao_chunks_owned
    };

  static TAO::Exception_Data
  _tao_Torrent_P2T_refresh_exceptiondata [] = 
    {
      {
        "IDL:Torrent/NotFound:1.0",
        Torrent::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Torrent::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "refresh",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Torrent_P2T_refresh_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
Torrent::P2T::sendNumChunks (
  const char * file_name,
  const char * server_ior_val,
  ::CORBA::Long number_of_chunks)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_file_name (file_name);
  TAO::Arg_Traits< char *>::in_arg_val _tao_server_ior_val (server_ior_val);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_number_of_chunks (number_of_chunks);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_file_name,
      &_tao_server_ior_val,
      &_tao_number_of_chunks
    };

  static TAO::Exception_Data
  _tao_Torrent_P2T_sendNumChunks_exceptiondata [] = 
    {
      {
        "IDL:Torrent/NotFound:1.0",
        Torrent::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Torrent::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "sendNumChunks",
      13,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Torrent_P2T_sendNumChunks_exceptiondata,
      1
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
Torrent::P2T::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Torrent::P2T::P2T (void)
{
}

Torrent::P2T::~P2T (void)
{
}

void
Torrent::P2T::_tao_any_destructor (void *_tao_void_pointer)
{
  P2T *_tao_tmp_pointer =
    static_cast<P2T *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Torrent::P2T_ptr
Torrent::P2T::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<P2T>::narrow (
        _tao_objref,
        "IDL:Torrent/P2T:1.0");
}

Torrent::P2T_ptr
Torrent::P2T::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<P2T>::unchecked_narrow (
        _tao_objref);
}

Torrent::P2T_ptr
Torrent::P2T::_nil (void)
{
  return 0;
}

Torrent::P2T_ptr
Torrent::P2T::_duplicate (P2T_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Torrent::P2T::_tao_release (P2T_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Torrent::P2T::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Torrent/P2T:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Torrent::P2T::_interface_repository_id (void) const
{
  return "IDL:Torrent/P2T:1.0";
}

::CORBA::Boolean
Torrent::P2T::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Torrent_P2T (
    ::CORBA::tk_objref,
    "IDL:Torrent/P2T:1.0",
    "P2T");
  

namespace Torrent
{
  ::CORBA::TypeCode_ptr const _tc_P2T =
    &_tao_tc_Torrent_P2T;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for Torrent::P2P.

Torrent::P2P_ptr
TAO::Objref_Traits<Torrent::P2P>::duplicate (
    Torrent::P2P_ptr p)
{
  return Torrent::P2P::_duplicate (p);
}

void
TAO::Objref_Traits<Torrent::P2P>::release (
    Torrent::P2P_ptr p)
{
  ::CORBA::release (p);
}

Torrent::P2P_ptr
TAO::Objref_Traits<Torrent::P2P>::nil (void)
{
  return Torrent::P2P::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<Torrent::P2P>::marshal (
    const Torrent::P2P_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::Chunk *
Torrent::P2P::getChunk (
  const char * file_name,
  ::CORBA::Long chunckNumber)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::Chunk>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_file_name (file_name);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_chunckNumber (chunckNumber);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_file_name,
      &_tao_chunckNumber
    };

  static TAO::Exception_Data
  _tao_Torrent_P2P_getChunk_exceptiondata [] = 
    {
      {
        "IDL:Torrent/NotFound:1.0",
        Torrent::NotFound::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , Torrent::_tc_NotFound
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "getChunk",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_Torrent_P2P_getChunk_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
Torrent::P2P::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

Torrent::P2P::P2P (void)
{
}

Torrent::P2P::~P2P (void)
{
}

void
Torrent::P2P::_tao_any_destructor (void *_tao_void_pointer)
{
  P2P *_tao_tmp_pointer =
    static_cast<P2P *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

Torrent::P2P_ptr
Torrent::P2P::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<P2P>::narrow (
        _tao_objref,
        "IDL:Torrent/P2P:1.0");
}

Torrent::P2P_ptr
Torrent::P2P::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<P2P>::unchecked_narrow (
        _tao_objref);
}

Torrent::P2P_ptr
Torrent::P2P::_nil (void)
{
  return 0;
}

Torrent::P2P_ptr
Torrent::P2P::_duplicate (P2P_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
Torrent::P2P::_tao_release (P2P_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
Torrent::P2P::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:Torrent/P2P:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* Torrent::P2P::_interface_repository_id (void) const
{
  return "IDL:Torrent/P2P:1.0";
}

::CORBA::Boolean
Torrent::P2P::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_typecode/objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_Torrent_P2P (
    ::CORBA::tk_objref,
    "IDL:Torrent/P2P:1.0",
    "P2P");
  

namespace Torrent
{
  ::CORBA::TypeCode_ptr const _tc_P2P =
    &_tao_tc_Torrent_P2P;
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Chunk &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<Chunk *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<Chunk>::insert_copy (
        _tao_any,
        Chunk::_tao_any_destructor,
        _tc_Chunk,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Chunk *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Chunk>::insert (
      _tao_any,
      Chunk::_tao_any_destructor,
      _tc_Chunk,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Chunk *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Chunk *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Chunk *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<Chunk>::extract (
        _tao_any,
        Chunk::_tao_any_destructor,
        _tc_Chunk,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const ChunkNumbers &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<ChunkNumbers *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<ChunkNumbers>::insert_copy (
        _tao_any,
        ChunkNumbers::_tao_any_destructor,
        _tc_ChunkNumbers,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    ChunkNumbers *_tao_elem)
{
  TAO::Any_Dual_Impl_T<ChunkNumbers>::insert (
      _tao_any,
      ChunkNumbers::_tao_any_destructor,
      _tc_ChunkNumbers,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    ChunkNumbers *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const ChunkNumbers *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const ChunkNumbers *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<ChunkNumbers>::extract (
        _tao_any,
        ChunkNumbers::_tao_any_destructor,
        _tc_ChunkNumbers,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const PeerToChunkMap &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<PeerToChunkMap *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<PeerToChunkMap>::insert_copy (
      _tao_any,
      PeerToChunkMap::_tao_any_destructor,
      _tc_PeerToChunkMap,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  PeerToChunkMap *_tao_elem)
{
  TAO::Any_Dual_Impl_T<PeerToChunkMap>::insert (
    _tao_any,
    PeerToChunkMap::_tao_any_destructor,
    _tc_PeerToChunkMap,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  PeerToChunkMap *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const PeerToChunkMap *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const PeerToChunkMap *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<PeerToChunkMap>::extract (
      _tao_any,
      PeerToChunkMap::_tao_any_destructor,
      _tc_PeerToChunkMap,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const OwnershipList &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<OwnershipList *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<OwnershipList>::insert_copy (
        _tao_any,
        OwnershipList::_tao_any_destructor,
        _tc_OwnershipList,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    OwnershipList *_tao_elem)
{
  TAO::Any_Dual_Impl_T<OwnershipList>::insert (
      _tao_any,
      OwnershipList::_tao_any_destructor,
      _tc_OwnershipList,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    OwnershipList *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const OwnershipList *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const OwnershipList *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<OwnershipList>::extract (
        _tao_any,
        OwnershipList::_tao_any_destructor,
        _tc_OwnershipList,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/any_op_cs.cpp:46


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const RegReply &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<RegReply *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<RegReply>::insert_copy (
      _tao_any,
      RegReply::_tao_any_destructor,
      _tc_RegReply,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  RegReply *_tao_elem)
{
  TAO::Any_Dual_Impl_T<RegReply>::insert (
    _tao_any,
    RegReply::_tao_any_destructor,
    _tc_RegReply,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  RegReply *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const RegReply *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const RegReply *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<RegReply>::extract (
      _tao_any,
      RegReply::_tao_any_destructor,
      _tc_RegReply,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<Torrent::NotFound>::demarshal_value (TAO_InputCDR & cdr)
  {
    ::CORBA::String_var id;

    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }

    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Torrent
{
  

  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::Torrent::NotFound &_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Torrent::NotFound>::insert_copy (
        _tao_any,
        ::Torrent::NotFound::_tao_any_destructor,
        ::Torrent::_tc_NotFound,
        _tao_elem);
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::Torrent::NotFound *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::Torrent::NotFound>::insert (
        _tao_any,
        ::Torrent::NotFound::_tao_any_destructor,
        ::Torrent::_tc_NotFound,
        _tao_elem);
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::Torrent::NotFound *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::Torrent::NotFound *&> (
        _tao_elem);
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::Torrent::NotFound *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::Torrent::NotFound>::extract (
          _tao_any,
          ::Torrent::NotFound::_tao_any_destructor,
          ::Torrent::_tc_NotFound,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const Torrent::NotFound &_tao_elem)
{
  TAO::Any_Dual_Impl_T<Torrent::NotFound>::insert_copy (
      _tao_any,
      Torrent::NotFound::_tao_any_destructor,
      Torrent::_tc_NotFound,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    Torrent::NotFound *_tao_elem)
{
  TAO::Any_Dual_Impl_T<Torrent::NotFound>::insert (
      _tao_any,
      Torrent::NotFound::_tao_any_destructor,
      Torrent::_tc_NotFound,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    Torrent::NotFound *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const Torrent::NotFound *&> (
      _tao_elem);
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const Torrent::NotFound *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<Torrent::NotFound>::extract (
        _tao_any,
        Torrent::NotFound::_tao_any_destructor,
        Torrent::_tc_NotFound,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Torrent::P2T>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Torrent
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      P2T_ptr _tao_elem)
  {
    P2T_ptr _tao_objptr =
      P2T::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      P2T_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<P2T>::insert (
        _tao_any,
        P2T::_tao_any_destructor,
        _tc_P2T,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      P2T_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<P2T>::extract (
          _tao_any,
          P2T::_tao_any_destructor,
          _tc_P2T,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Torrent::P2T_ptr _tao_elem)
{
  Torrent::P2T_ptr _tao_objptr =
    Torrent::P2T::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Torrent::P2T_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Torrent::P2T>::insert (
      _tao_any,
      Torrent::P2T::_tao_any_destructor,
      Torrent::_tc_P2T,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Torrent::P2T_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Torrent::P2T>::extract (
        _tao_any,
        Torrent::P2T::_tao_any_destructor,
        Torrent::_tc_P2T,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_interface/any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<Torrent::P2P>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace Torrent
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      P2P_ptr _tao_elem)
  {
    P2P_ptr _tao_objptr =
      P2P::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      P2P_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<P2P>::insert (
        _tao_any,
        P2P::_tao_any_destructor,
        _tc_P2P,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      P2P_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<P2P>::extract (
          _tao_any,
          P2P::_tao_any_destructor,
          _tc_P2P,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Torrent::P2P_ptr _tao_elem)
{
  Torrent::P2P_ptr _tao_objptr =
    Torrent::P2P::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    Torrent::P2P_ptr *_tao_elem)
{
  TAO::Any_Impl_T<Torrent::P2P>::insert (
      _tao_any,
      Torrent::P2P::_tao_any_destructor,
      Torrent::_tc_P2P,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    Torrent::P2P_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<Torrent::P2P>::extract (
        _tao_any,
        Torrent::P2P::_tao_any_destructor,
        Torrent::_tc_P2P,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_Chunk_CPP_
#define _TAO_CDR_OP_Chunk_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Chunk &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Chunk &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_Chunk_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_ChunkNumbers_CPP_
#define _TAO_CDR_OP_ChunkNumbers_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const ChunkNumbers &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    ChunkNumbers &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_ChunkNumbers_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const PeerToChunkMap &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.client_id.in ()) &&
    (strm << _tao_aggregate.peer_ior_val.in ()) &&
    (strm << _tao_aggregate.chunks_owned) &&
    (strm << _tao_aggregate.num_chunks_owned);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    PeerToChunkMap &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.client_id.out ()) &&
    (strm >> _tao_aggregate.peer_ior_val.out ()) &&
    (strm >> _tao_aggregate.chunks_owned) &&
    (strm >> _tao_aggregate.num_chunks_owned);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OwnershipList_CPP_
#define _TAO_CDR_OP_OwnershipList_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OwnershipList &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OwnershipList &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OwnershipList_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const RegReply &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.num_chunks) &&
    (strm << _tao_aggregate.num_chunks_from_server) &&
    (strm << _tao_aggregate.server_ior_val.in ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    RegReply &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.num_chunks) &&
    (strm >> _tao_aggregate.num_chunks_from_server) &&
    (strm >> _tao_aggregate.server_ior_val.out ());
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Torrent::NotFound &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.msg.in ())
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Torrent::NotFound &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.msg.out ())
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Torrent::P2T_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Torrent::P2T_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Torrent::P2T RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const Torrent::P2P_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    Torrent::P2P_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::Torrent::P2P RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



