-README.txt         This file
-Event_comm.idl     idl file for project
-Event_comm.mpc     project creater file
-Event_comm.mwc     workspace creater file
-Event_comm.cbp     CodeBlocks project file (can ignore completely)

# Generated by [ $ACE_ROOT/bin/tao_idl -GI PubSub.idl ]
-Event_CommC.cpp/.h
-Event_CommC.inl
-Event_CommI.cpp/.h
-Event_CommS.cpp/.h

# All the other .cpp/.h were manually written

# made projects for GNUMAKE with $ACE_ROOT/bin/mpc.pl Event_Comm.mpc
GNUmakefile.Event_Comm_Consumer    auto generated make file
GNUmakefile.Event_Comm_Idl         auto generated make file
GNUmakefile.Event_Comm_Notifier    auto generated make file
GNUmakefile.Event_Comm_Supplier    auto generated make file

# made workspace for GNUMAKE with $ACE_ROOT/bin/mwc.pl Event_comm.mwc
GNUMakefile                   auto generated make file, for entire project



# To buid:

### Generate the platform specific files
    $ACE_ROOT/bin/tao_idl Event_Comm.idl

### Generate platform specific make files
    $ACE_ROOT/bin/mpc.pl Event_Comm.mpc -type gnuace
    $ACE_ROOT/bin/mwc.pl Event_Comm.mwc -type gnuace


# To test/run:

### Start the local ACE/TAO Naming Service ('-m 1' turns on multicast)
    $ACE_ROOT/TAO/orbsvcs/Naming_Service/tao_cosnaming -m 1

#### You see:
MCAST_Parser.cpp; Sent multicast.# of bytes sent is 16.
#### Then : (If you do not see the next line, then the Name Resolver is nto using multicast properly)
MCAST_Parser.cpp: service resolved to IOR <IOR:01000000


# To now run the code:
### Launch the notify server which will connect the pub(s) and sub(s) (separate terminal)
    ./notifier

### Launch the publisher(s) you want. (one per different terminal)
    ./supplier <topic-string-id>

### Launch the subscribers(s) you want. (one per different terminal)
    ./consumer <topic-string-id>

### Notes on usage:

    -Once the Consumers have subscribed you can send them info by typing
    commands in the Supplier window.  These will be sent to all the
    Consumers who have subscribed.  Likewise, you can send messages
    from a Consumer to all other Consumers by typing messages in a
    Consumer window.

    -Note that if you type "quit" or  ^C in a Consumer window the
    Consumer will unsubscribe and shutdown its handlers and exit.
    Likewise, if you type  ^C in the Notifier window
    the Notifier will disconnect all of its Consumers and exit.

    -When you want to terminate a Consumer or a Supplier, just type ^C
    or "quit" and the process will shut down gracefully.


