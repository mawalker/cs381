#
# CS 381 assignmet4
#
# Ace-Tao Pub/Sub implmentation for CS381, Spring 2014
# Based on HEAVILY on TAO/examples/Event_Comm example project. 
# 
# Author: Michael A. Walker
#       : Violetta Vylegzhanina
# Date:   April 23, 2014
#
######################
# Files in this folder
######################

-README.txt           This file
-Event_comm.idl       idl file for project
-Event_comm.mpc       project creater file
-Event_comm.mwc       workspace creater file
-assignment4.cbp      CodeBlocks project file (can ignore completely)
-assignment4.layout   CodeBlocks project layout file (can ignore completely)

# Generated by [ $ACE_ROOT/bin/tao_idl -GI PubSub.idl ]
-Event_CommC.cpp/.h
-Event_CommC.inl
-Event_CommI.cpp/.h
-Event_CommS.cpp/.h

# Manually written code

  # main logic of pub/sub
-Event_Comm_i.cpp
-Event_Comm_i.h

  # consumer (sub) binary executable scaffolding
-consumer.cpp
-Consumer_Handler.cpp/.h
-Consumer_Input_Handler.cpp/.h

   # notifier (linker) binary executable scaffolding
   # server to link pub(s) to sub(s)
-notifier.cpp/.h
-Notifier_Handler.cpp/.h
-Notifier_Server.cpp/.h

   # supplier (pub) binary executable scaffolding
-supplier.cpp/.h
-Supplier_Input_Handler.cpp/.h


# made projects for GNUMAKE with $ACE_ROOT/bin/mpc.pl Event_Comm.mpc
GNUmakefile.Event_Comm_Consumer    auto generated make file
GNUmakefile.Event_Comm_Idl         auto generated make file
GNUmakefile.Event_Comm_Notifier    auto generated make file
GNUmakefile.Event_Comm_Supplier    auto generated make file

# made workspace for GNUMAKE with $ACE_ROOT/bin/mwc.pl Event_comm.mwc
GNUMakefile                   auto generated make file, make for entire project

# To buid:

### Generate the platform specific files
   [ $ACE_ROOT/bin/tao_idl Event_Comm.idl ]

### Generate platform specific make files
   [ $ACE_ROOT/bin/mpc.pl Event_Comm.mpc -type gnuace ]
   [ $ACE_ROOT/bin/mwc.pl Event_Comm.mwc -type gnuace ]


# To test/run:

### Start the local ACE/TAO Naming Service ('-m 1' turns on multicast)
   [ $ACE_ROOT/TAO/orbsvcs/Naming_Service/tao_cosnaming -m 1 ]

#### You see will see this line in both cases if Naming_Service is working or not:
MCAST_Parser.cpp; Sent multicast.# of bytes sent is 16.
#### Then : (If you do not see the next line, then the Name Resolver is not using multicast properly)
MCAST_Parser.cpp: service resolved to IOR <IOR:01000000


# To now run the code:
### Launch the notify server which will connect the pub(s) and sub(s) (separate terminal)
   [ ./notifier ]

### Launch the publisher(s) you want. (one per different terminal)
   [ ./supplier ]

### Launch the subscribers(s) you want. (one per different terminal)
   [ ./consumer <topic-to-subscribe-to-string-id> ]

### Notes on usage:

    -Once the Consumers have subscribed you can send them info by typing
    commands in the Supplier window.  These will be sent to all the
    Consumers who have subscribed.  Likewise, you can send messages
    from a Consumer to all other Consumers by typing messages in a
    Consumer window.

    -Note that if you type "quit" or  ^C in a Consumer window the
    Consumer will unsubscribe and shutdown its handlers and exit.
    Likewise, if you type  ^C in the Notifier window
    the Notifier will disconnect all of its Consumers and exit.

    -When you want to terminate a Consumer or a Supplier, just type ^C
    or "quit" and the process will shut down gracefully.


