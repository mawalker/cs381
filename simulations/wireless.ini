[General]
#sim-time-limit = 10s
tkenv-plugin-path = ../../../etc/plugins
record-eventlog = true

#---------------------------
# all common configurations
#---------------------------

# here we manipulate the transmitter power. 
**.channelControl.pMax = 100mW      # support a high enough power
**.radio.transmitterPower = 50mW    # tweak this depending on whether comm is taking place or not.

# top level wlan configurations
**.wlan[*].typename = "Ieee80211Nic"  # we use the 802.11 NIC type (this is anyway the default) but we could
                                      # try others like 802.15, etc
**.wlan[*].opMode = "g"               # we could experiment with different 802.11 MAC protocols if needed
**.wlan[*].mac.basicBitrate = -1bps		# let the system figure it out.
**.wlan[*].mac.controlBitrate = -1bps	# let the system figure it out.
**.wlan[*].mac.address = "auto"         # mac address assignment
**.wlan[*].mgmtType = "Ieee80211MgmtAdhoc" # because we have an adhoc set of nodes
**.wlan[*].agent.activeScan = false			# the mobile device will not actively scan for the access point but
                                            # rather respond to a scan from the access point
**.wlan[*].mgmt.frameCapacity = 10

# parameters of the mobility base. Both the client and server use mobility
# this kind of gives a sense of the area where these hosts are roaming
# around
**.mobility.debug = true
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxX = 5000m
**.mobility.constraintAreaMaxY = 1000m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.updateInterval = 0.005s

# we specify the number of clients here. So this way we can then decide the placement 
# of all clients.
**.numClients = 4

# we need to set the speed of each mobile entity
**.server.mobility.speed = 15mps
**.client[*].mobility.speed = 15mps

# we need the following to tell the system that the tcp App is
# to use the P2P capability we developed
**.client[*].tcpApp[*].typename = "ClientApp"
**.server.tcpApp[*].typename = "ServerApp"

# tcp apps settings for the client
**.client[0].tcpApp[0].myID = "client[0]"
**.client[1].tcpApp[0].myID = "client[1]"
**.client[2].tcpApp[0].myID = "client[2]"
**.client[3].tcpApp[0].myID = "client[3]"
#**.client[4].tcpApp[0].myID = "client[4]"
#**.client[5].tcpApp[0].myID = "client[5]"
#**.client[1].tcpApp[0].myID = "client[]"
**.client[*].tcpApp[0].connectPort = 1000
**.client[*].tcpApp[0].fileSize = 10KiB
**.client[*].tcpApp[0].dataTransferMode = "object"

# tcp apps settings for the server
**.server.tcpApp[0].localAddress = "server"
**.server.tcpApp[0].localPort = 1000
**.server.tcpApp[0].dataTransferMode = "object"

#---------------------------------------------------
[Config LinearMovement]
network = CSWireless
# set the mobility types for the client and server. You can experiment
# with the whole slew of possibilities but we shall use linear here
**.server.mobilityType = "LinearMobility"
**.client[*].mobilityType = "LinearMobility"

# now let us give some initial position values. Say server is at one end and the client
# is at another end. For some odd reason, providing a value is not placing the 
# object in the desired location. But this does something.
**.server.mobility.initialX = uniform(4999m,5000m)
**.server.mobility.initialY = uniform(999m,1000m)
**.server.mobility.initialZ = 0.0
**.server.mobility.angle = 180deg  # move from right to left

**.client[*].mobility.initialX = uniform(0m,1m)
**.client[*].mobility.initialY = uniform(0m,1m)
**.client[*].mobility.initialZ = 0.0
**.client[*].mobility.angle = 0deg # from from left to right


#---------------------------------------------------
[Config CircularMovement]
network = CSWireless

# set the mobility types for the client and server. You can experiment
# with the whole slew of possibilities but we shall use linear here
**.server.mobilityType = "CircleMobility"
**.client[*].mobilityType = "CircleMobility"

# now let us give some initial position values. Say server is at one end and the client
# is at another end. The coordinates here are the center of the circle, and the radius as 
# as initial angle
**.server.mobility.cx = uniform(2500m,3000m)
**.server.mobility.cy = uniform(500m,500m)
**.server.mobility.cz = 0m
**.server.mobility.r = 1000m
**.server.mobility.startAngle = uniform(180deg,180deg)


**.client[*].mobility.cx = uniform(2000m,2500m) 
**.client[*].mobility.cy = uniform(500m,500m)
**.client[*].mobility.cz = 0m
**.client[*].mobility.r = 1000m
**.client[*].mobility.startAngle = uniform(0deg,0deg)
